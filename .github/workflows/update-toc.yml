name: "Version Bump, TOC Update, and Clean Old Branches"

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # 🔍 Extract bump type from commit message
      - name: Extract Bump Type
        id: extract_bump_type
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Default bump type
          BUMP_TYPE="hotfix"

          if [[ "$COMMIT_MSG" =~ \[bump:\ major\] ]]; then
            BUMP_TYPE="major"
          elif [[ "$COMMIT_MSG" =~ \[bump:\ minor\] ]]; then
            BUMP_TYPE="minor"
          elif [[ "$COMMIT_MSG" =~ \[bump:\ hotfix\] ]]; then
            BUMP_TYPE="hotfix"
          fi

          echo "Bump type detected: $BUMP_TYPE"
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      # 🚀 Determine next version based on bump type
      - name: Determine Next Version
        id: bump_version
        run: |
          git fetch origin
          git checkout main
          git merge origin/main

          CURRENT_VERSION="$(cat .version)"
          IFS='.' read -r MAJOR MINOR HOTFIX <<< "$CURRENT_VERSION"

          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              HOTFIX=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              HOTFIX=0
              ;;
            hotfix)
              HOTFIX=$((HOTFIX + 1))
              ;;
            *)
              echo "Invalid bump type: $BUMP_TYPE"
              exit 1
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${HOTFIX}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Version bumped to: $NEW_VERSION"

      # 🚀 Create or switch to version branch (vX.Y.Z)
      - name: Create or Switch to Version Branch
        id: create_branch
        run: |
          NEW_BRANCH="v${NEW_VERSION}"

          if git ls-remote --heads origin "$NEW_BRANCH" | grep -q "$NEW_BRANCH"; then
            git checkout "$NEW_BRANCH"
            git pull --rebase origin "$NEW_BRANCH"
          else
            git checkout main
            git merge origin/main
            git checkout -b "$NEW_BRANCH"
          fi

          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_ENV
          echo "new_branch=$NEW_BRANCH" >> $GITHUB_OUTPUT

      # 🚀 Update .version file and generate TOC
      - name: Update Version File and Generate TOC
        run: |
          echo "$NEW_VERSION" > .version
          python scripts/generate_TOC.py

      # 🚀 Commit & push changes to vX.Y.Z
      - name: Commit and Push to Version Branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .version docs/index.md
          git commit -m "Auto-update: Bump version to $NEW_VERSION" || echo "No changes to commit."
          git push origin HEAD

      # 🚀 Merge vX.Y.Z back to main [skip ci]
      - name: Merge Version Branch Back to Main [skip ci]
        run: |
          git checkout main
          git pull origin main
          git merge --no-ff --no-edit "$NEW_BRANCH"
          git push origin main

      # 🚀 Update 'latest' Branch for Read the Docs
      - name: Update 'latest' Branch
        run: |
          git checkout "$NEW_BRANCH"
          git branch -f latest
          git push origin latest --force

      # 🧹 Clean Up Old Version Branches (Keep Latest 5)
      - name: Cleanup Old Version Branches
        run: |
          git fetch --all

          BRANCHES_TO_DELETE=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/remotes/origin/v* | sed 's|origin/||' | tail -n +6)

          PROTECTED_BRANCHES=("main" "latest")

          for BRANCH in $BRANCHES_TO_DELETE; do
            if [[ ! " ${PROTECTED_BRANCHES[@]} " =~ " ${BRANCH} " ]]; then
              echo "Deleting old branch: $BRANCH"
              git push origin --delete "$BRANCH" || echo "Failed to delete $BRANCH"
            fi
          done
